// Prisma schema for Local Music Events
// Converted from recipes to events/venues/artists

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin user model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  events    Event[]
  venues    Venue[]
  artists   Artist[]
  promoters Promoter[]

  @@map("users")
}

// Venue model
model Venue {
  id          String  @id
  name        String
  slug        String? @unique // URL-friendly version of name, e.g., "mississippi-underground"
  address     String
  city        String
  state       String
  zipCode     String?
  capacity    Int?
  website     String?
  phone       String?
  email       String?
  description String?
  image       String?

  // Social media
  facebook    String?
  instagram   String?
  twitter     String?
  
  // Coordinates for mapping
  latitude    Float?
  longitude   Float?
  
  // Amenities and accessibility (stored as JSON arrays)
  amenities     String? // JSON array of amenities
  accessibility String? // JSON array of accessibility features

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  events   Event[]
  authorId String?
  author   User?   @relation(fields: [authorId], references: [id])

  @@map("venues")
}

// Artist model
model Artist {
  id       String  @id
  name     String
  genre    String  // primary genre
  bio      String?
  image    String?
  website  String?
  hometown String?
  formed   String? // year or date formed

  // Social media
  facebook   String?
  instagram  String?
  twitter    String?
  tiktok     String?
  youtube    String?
  spotify    String?
  bandcamp   String?
  soundcloud String?
  
  // Spotify integration fields
  spotifyId       String? // Spotify artist ID
  spotifyUrl      String? // Spotify artist URL
  spotifyPopularity Int?  // Spotify popularity score (0-100)
  spotifyFollowers  Int?  // Number of Spotify followers
  spotifyGenres     String? // JSON array of Spotify genres
  spotifyTopTracks  String? // JSON array of top track data
  spotifyAlbums     String? // JSON array of album data
  lastSpotifySync   DateTime? // Last time Spotify data was fetched
  
  // Band members (stored as JSON array)
  members String? // JSON array of member names
  
  // Tags (stored as JSON array)  
  tags String? // JSON array of tags

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  events   EventArtist[]
  authorId String?
  author   User?         @relation(fields: [authorId], references: [id])

  @@map("artists")
}

// Promoter model
model Promoter {
  id          String  @id @default(cuid())
  name        String
  slug        String? @unique // URL-friendly version of name, e.g., "mississippi-underground"
  description String?
  website     String?
  email       String?
  phone       String?
  image       String?

  // Social media
  facebook  String?
  instagram String?
  twitter   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  events   Event[]
  authorId String?
  author   User?   @relation(fields: [authorId], references: [id])

  @@map("promoters")
}

// Event model
model Event {
  id          String   @id
  title       String
  slug        String?  @unique // URL-friendly version of title, e.g., "wicked-warehouse-troyboi-2025"
  description String
  date        String   // ISO date string
  time        String   // HH:MM format
  endTime     String?  // HH:MM format
  
  // Event details
  genre       String
  subGenres   String?  // JSON array of additional genres when genre is "multi-genre"
  category    String   // concert, festival, open-mic, etc.
  promoter    String?
  promoters   String?  // JSON array of promoters
  ticketUrl   String?
  facebookEvent String?
  instagramPost String?
  flyer       String?
  bannerImage String? // Event banner image
  price       String?
  ageRestriction String?
  featured    Boolean  @default(false)
  hero        Boolean? @default(false) // Show in hero section
  status      String   @default("upcoming") // upcoming, cancelled, postponed, sold-out, past
  
  // Tags (stored as JSON array)
  tags        String?  // JSON array of tags

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  venueId     String
  venue       Venue          @relation(fields: [venueId], references: [id])
  artists     EventArtist[]
  
  // Optional promoter relation (keeping string promoter field for flexibility)
  promoterId  String?
  promoterRel Promoter?      @relation(fields: [promoterId], references: [id])
  
  // Created by admin user
  authorId    String?
  author      User?          @relation(fields: [authorId], references: [id])

  @@map("events")
}

// Many-to-many relation between events and artists
model EventArtist {
  eventId  String
  artistId String

  // Relations
  event  Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@id([eventId, artistId])
  @@map("event_artists")
}

// Event categories for organization
model EventCategory {
  id          String   @id
  name        String
  description String
  emoji       String
  count       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("event_categories")
}

// Music genres for organization
model MusicGenre {
  id          String   @id
  name        String
  description String
  color       String   // hex color for UI
  count       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("music_genres")
}

// Event reviews/ratings (optional future feature)
model EventReview {
  id        String   @id @default(cuid())
  eventId   String
  rating    Int      // 1-5 stars
  comment   String?
  author    String   // anonymous or name
  createdAt DateTime @default(now())

  @@map("event_reviews")
}

// Tags system for flexible categorization
model Tag {
  id        String      @id @default(cuid())
  name      String      @unique
  category  String      @default("general") // event, venue, artist, or general
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("tags")
}